using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace TestWork.Models
{
    [Table("users")]
    public class Users
    {
        // Id пользователя. Первичный ключ.
        [Key]
        // Атрибут [Column("название_столбца_в_таблице_бд")] необходим в случае отличия названия столбца в модели (непосредственно здесь) от его непосредственного названия в БД.
        [Column("users_id")]
        public int UsersId { get; set; }

        // Имя пользователя.
        [RegularExpression(@"[а-яА-Яa-zA-Z""'\s-]*$", ErrorMessage = "Поле содержит недопустимые символы.")]
        [Required(ErrorMessage = "Требуется имя.")]
        [StringLength(100)]
        // Атрибут [Column("название_столбца_в_таблице_бд")] необходим в случае отличия названия столбца в модели (непосредственно здесь) от его непосредственного названия в БД.
        [Column("users_name")]
        // Атрибут  [Display(Name = "нужный_текст")] покажет при отображении представленияв названии столбца везде текст "нужный текст" вместо полученного из БД имени столбца.
        [Display(Name = "Имя пользователя")]
        public string UsersName { get; set; }

        // Адрес электронной почты пользователя.
        [DataType(DataType.EmailAddress, ErrorMessage = "Поле содержит недопустимые символы.")]
        [StringLength(100)]
        [Required(ErrorMessage = "Требуется адрес электронной почты.")]
        // Атрибут [Column("название_столбца_в_таблице_бд")] необходим в случае отличия названия столбца в модели (непосредственно здесь) от его непосредственного названия в БД.
        [Column("users_email")]
        // Атрибут  [Display(Name = "нужный_текст")] покажет при отображении представленияв названии столбца везде текст "нужный текст" вместо полученного из БД имени столбца.
        [Display(Name = "Адрес электронной почты пользователя")]
        public string UsersEmail { get; set; }

        // Номер телефона пользователя.
        [Required(ErrorMessage = "Требуется номер телефона")]
        [RegularExpression(@"^[0-9\s+]*$", ErrorMessage = "Поле содержит недопустимые символы.")]
        [StringLength(20)]
        // Атрибут [Column("название_столбца_в_таблице_бд")] необходим в случае отличия названия столбца в модели (непосредственно здесь) от его непосредственного названия в БД.
        [Column("users_phone_number")]
        // Атрибут  [Display(Name = "нужный_текст")] покажет при отображении представленияв названии столбца везде текст "нужный текст" вместо полученного из БД имени столбца.
        [Display(Name = "Телефонный номер пользователя")]
        public string UsersPhoneNumber { get; set; }

        // Адрес пользователя.
        [Required(ErrorMessage = "Требуется адрес")]
        [StringLength(100)]
        // Атрибут [Column("название_столбца_в_таблице_бд")] необходим в случае отличия названия столбца в модели (непосредственно здесь) от его непосредственного названия в БД.
        [Column("users_address")]
        // Атрибут  [Display(Name = "нужный_текст")] покажет при отображении представленияв названии столбца везде текст "нужный текст" вместо полученного из БД имени столбца.
        [Display(Name = "Адрес пользователя")]
        public string UsersAddress { get; set; }

        // Пароль пользователя.
        [Required(ErrorMessage = "Требуется пароль")]
        [StringLength(32, MinimumLength = 8, ErrorMessage = "Длина пароля должна составлять от 8 до 20 символов")]
        // Атрибут [Column("название_столбца_в_таблице_бд")] необходим в случае отличия названия столбца в модели (непосредственно здесь) от его непосредственного названия в БД.
        [Column("users_password")]
        [DataType(DataType.Password)]
        // Атрибут  [Display(Name = "нужный_текст")] покажет при отображении представленияв названии столбца везде текст "нужный текст" вместо полученного из БД имени столбца.
        [Display(Name = "Пароль пользователя (8-20 символов)")]
        public string UsersPassword { get; set; }

        // Пароль пользователя.
        [DataType(DataType.Date, ErrorMessage = "Поле содержит недопустимые символы.")]
        [Required(ErrorMessage = "Требуется дата рождения")]
        [StringLength(10)]
        // Атрибут [Column("название_столбца_в_таблице_бд")] необходим в случае отличия названия столбца в модели (непосредственно здесь) от его непосредственного названия в БД.
        [Column("users_birthday")]
        // Атрибут  [Display(Name = "нужный_текст")] покажет при отображении представленияв названии столбца везде текст "нужный текст" вместо полученного из БД имени столбца.
        [Display(Name = "Дата рождения пользователя")]
        public string UsersBirthday { get; set; }

        // Флаг существования.
        // Атрибут [Column("название_столбца_в_таблице_бд")] необходим в случае отличия названия столбца в модели (непосредственно здесь) от его непосредственного названия в БД.
        [Column("users_existed_flag")]
        // Атрибут  [Display(Name = "нужный_текст")] покажет при отображении представленияв названии столбца везде текст "нужный текст" вместо полученного из БД имени столбца.
        [Display(Name = "Флаг существования")]
        public bool UsersExistedFlag { get; set; }

        // Id пользовательской роли.
        // Атрибут [Column("название_столбца_в_таблице_бд")] необходим в случае отличия названия столбца в модели (непосредственно здесь) от его непосредственного названия в БД.
        [Column("roles_id")]
        public int RolesId { get; set; }

        // Внешний ключ на Id пользовательской роли.
        [ForeignKey("RolesId")]
        public Roles UserRoles { get; set; }

        // Таблица пациентов.
        public virtual Customer Customer { get; set; }
    }
}
