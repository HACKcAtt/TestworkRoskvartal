@model PaginatedList<TestWork.Models.Doctors>
<style>
    p.class-hover {
        color: #3a71b9;
        text-decoration: none;
    }
    p.class-hover:hover {
        color: #3a71b9;
        text-decoration: underline;
    }
</style>
<div class="instance-table-item">
    @* Заголовочный раздел таблицы. *@
    <table class="table" id="coloumn_names">
        <thead>
            <tr>
                <th id="name_th" style="vertical-align: top">
                    @{
                        string doctorsName = Html.DisplayNameFor(model => (new Doctors()).DoctorsName);
                    }
                    <p class="class-hover" data-href='@Url.Action("GetDoctorsTable", "Doctors", new { page = Model.PageIndex, searchString = Model.searchQuery, sortOrder = ViewBag.NameSortParm }, null)'>@doctorsName</p>
                </th>
                <th id="name_th_2" style="vertical-align: top">
                    @{
                        string clinicalDepartmentName = Html.DisplayNameFor(model => (new Doctors()).ClinicalDepartment.ClinicalDepartmentName);
                    }
                    <p class="class-hover" data-href='@Url.Action("GetDoctorsTable", "Doctors", new { page = Model.PageIndex, searchString = Model.searchQuery, sortOrder = ViewBag.ClinicalDepartmentNameSortParm }, null)'>@clinicalDepartmentName</p>
                </th>
                <th style="vertical-align: top">
                    @Html.DisplayNameFor(model => (new Doctors()).DoctorsSpecialization)
                </th>
                <th style="vertical-align: top">
                    @Html.DisplayNameFor(model => (new Doctors()).DoctorsPhoneNumber)
                </th>
            </tr>
        </thead>
        <tbody>
            @* Заполнение таблицы. *@
            @if (Model != null)
            {
                @foreach (var item in Model)
                {
                    @* Нельзя обращаться к несуществующему элементу (выйдет ошибка при отрисовке страницы), поэтому необходима проверка на существование. *@
                    @if ((item != null) && (item.DoctorsExistedFlag))
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.DoctorsName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.ClinicalDepartment.ClinicalDepartmentName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.DoctorsSpecialization)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.DoctorsPhoneNumber)
                            </td>
                            <td>
                                @if (User.IsInRole("Registrator"))
                                {
                                    <a asp-action="Create" asp-route-id="@item.DoctorsId" class="instances-edit">Правка |</a>
                                }
                                <a asp-action="Details" asp-route-id="@item.DoctorsId" class="instance-details">Детали </a>|
                                @if (User.IsInRole("Registrator"))
                                {
                                    <a asp-action = "Delete" asp-route-id = "@item.DoctorsId" class="instance-delete">Удаление |</a>
                                }
                                <a asp-action="CreateDoctorsAppointment" asp-route-id="@item.DoctorsId" class="instances-edit">Запись на приём</a>
                            </td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>
</div>

@* Реализация пагинации (постраничного вывода). Проверка наличия предыдущей и следующей страницы, чтобы в случае отсутствия делать соответствующую кнопку перехода недоступной. *@
@{
    var prevDisabled = Model.HasPreviousPage ? "" : "disabled";
    var nextDisabled = Model.HasNextPage ? "" : "disabled";
}

@* Реализация пагинации (постраничного вывода). Список со стрелками перехода к первой и последней странице и номерами страниц между ними. *@
<ul class="pagination">
    @* Ссылка перехода к первой странице. *@
    <li><a asp-action="Index" asp-route-page="1" asp-route-searchString="@Model.searchQuery" data-pagination-link="@Url.Action("GetDoctorsTable", new { page = 1, searchString = Model.searchQuery })" class="btn btn-default @prevDisabled">&lt;&lt;</a></li>
    @* Ссылка на одну предыдущую по отношению к текущей странице страницу. *@
    @if (Model.HasPreviousPage == true)
    {
        <li><a asp-action="Index" asp-route-page="@(Model.PageIndex - 1)" asp-route-searchString="@Model.searchQuery" data-pagination-link="@Url.Action("GetDoctorsTable", new { page = (Model.PageIndex - 1), searchString = Model.searchQuery, sortOrder = ViewBag.CurrentSort })">@(Model.PageIndex - 1)</a></li>
    }
    @* Ссылка на текущую и две следующих страницы. *@
    <li class="active"><a asp-action="Index" asp-route-page="@(Model.PageIndex)" asp-route-searchString="@Model.searchQuery" data-pagination-link="@Url.Action("GetDoctorsTable", new { page = Model.PageIndex, searchString = Model.searchQuery, sortOrder = ViewBag.CurrentSort })">@(Model.PageIndex)</a></li>

    @for (int i = (Model.PageIndex + 1); i <= ((Model.TotalPages - Model.PageIndex > 2) ? (2 + Model.PageIndex) : (Model.TotalPages)); i++)
    {

        <li><a asp-action="Index" asp-route-page="@i" asp-route-searchString="@Model.searchQuery" data-pagination-link="@Url.Action("GetDoctorsTable", new { page = i })">@i</a></li>

    }
    @* Переход к последней странице. *@
    <li><a asp-action="Index" asp-route-page="@Model.TotalPages" asp-route-searchString="@Model.searchQuery" class="btn btn-default @nextDisabled" data-pagination-link="@Url.Action("GetDoctorsTable", new { page = Model.TotalPages, searchString = Model.searchQuery, sortOrder = ViewBag.CurrentSort })">&gt;&gt;</a></li>
</ul>
